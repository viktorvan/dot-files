# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #


# Reload yabai
hyper - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# Start applications
meh - return : open -a /Applications/Warp.app
hyper - return : open -a /Applications/Safari.app
meh - o : open -a /Users/viktor/Library/Application\ Support/JetBrains/Toolbox/apps/Rider/ch-0/231.9011.39/Rider.app
hyper - 0x2A : open -a /Applications/Visual\ Studio\ Code.app
hyper - o : open -a /Applications/Visual\ Studio\ Code.app

# Restart hammerspoon
hyper - s : osascript -e 'quit app "HammerSpoon"'; open -a /Applications/HammerSpoon.app

# focus window
meh - h : yabai -m window --focus west
meh - i : yabai -m window --focus east
meh - e : yabai -m window --focus north
meh - n : yabai -m window --focus south

# move managed window
hyper - h : yabai -m window --warp west
hyper - i : yabai -m window --warp east
hyper - e : yabai -m window --warp north
hyper - n : yabai -m window --warp south

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
meh - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# meh - space : yabai -m space --focus recent
meh - space : yabai -m space --focus next
hyper - space : yabai -m space --focus prev
meh - j : yabai -m space --focus 1
meh - l : yabai -m space --focus 2
meh - u : yabai -m space --focus 3
meh - y : yabai -m space --focus 4
meh - 0x29 : yabai -m space --focus 5

# send window to desktop and follow focus
hyper - j : yabai -m window --space 1; yabai -m space --focus 1
hyper - l : yabai -m window --space 2; yabai -m space --focus 2
hyper - u : yabai -m window --space  3; yabai -m space --focus 3
hyper - y : yabai -m window --space  4; yabai -m space --focus 4
hyper - 0x29 : yabai -m window --space  4; yabai -m space --focus 5

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# change window size
meh - k : yabai -m window west --resize right:-100:0 2> /dev/null || yabai -m window --resize right:-100:0
meh - 0x2B : yabai -m window north --resize bottom:0:100 2> /dev/null || yabai -m window --resize bottom:0:100
meh - m : yabai -m window south --resize top:0:-100 2> /dev/null || yabai -m window --resize top:0:-100
meh - 0x2F : yabai -m window east --resize left:100:0 2> /dev/null || yabai -m window --resize left:100:0

# move floating window to left/right half of screen
meh - a : yabai -m window --grid 1:2:0:0:1:1 || (yabai -m window --toggle float; yabai -m window --grid 1:2:0:0:1:1)
meh - s : yabai -m window --grid 1:2:1:1:1:1 || (yabai -m window --toggle float; yabai -m window --grid 1:2:1:1:1:1)

# toggle float
meh - backspace : yabai -m window --toggle float --grid 1:1:0:0:1:1

# center floating window on screen
# <rows>:<cols>:<start-x>:<start-y>:<width>:<height>
ctrl - backspace : yabai -m window --grid 8:8:1:1:6:6

ctrl + shift - backspace : yabai -m window --grid 80:80:3:3:74:74


# Toggle mouse focus mode
hyper - m : [[ $(yabai -m config focus_follows_mouse) = "disabled" ]] && \
    yabai -m config focus_follows_mouse autoraise || \
    yabai -m config focus_follows_mouse off

# Minize window using yabai
cmd - m : yabai -m window --minimize

# testing
meh - z : yabai -m window --toggle topmost; yabai -m window --toggle topmost
