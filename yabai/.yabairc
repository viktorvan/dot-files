# for this to work you must configure sudo such that
# it will be able to run the command without password

yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

# bsp or float (default: float)
yabai -m config layout bsp
yabai -m config auto_balance off

# Floating point value between 0 and 1 (default: 0.5)
yabai -m config split_ratio 0.5

# floating windows are always on top (default: off)
yabai -m config window_topmost 				off


# modify window shadows (default: on, options: on, off, float)
yabai -m config window_shadow 				off

# Add top_padding if external display
# internalDisplayId='37D8832A-2D66-02CA-B9F7-8F30A301B230'
if [ -z $(yabai -m query --displays | jq -r '.[] | select(.uuid == "37D8832A-2D66-02CA-B9F7-8F30A301B230")') ] 
then
    yabai -m config top_padding                 32
else
    yabai -m config top_padding                 0
fi

yabai -m config bottom_padding              0
yabai -m config left_padding                0
yabai -m config right_padding               0
yabai -m config window_gap                  4

yabai -m config window_border               off
yabai -m config window_opacity on
yabai -m config active_window_opacity 		1.0
# yabai -m config normal_window_opacity 		0.90

# set focus follows mouse mode (default: off, options: off, autoraise, autofocus)
yabai -m config focus_follows_mouse off

# set mouse follows focus mode (default: off)
yabai -m config mouse_follows_focus off

# Disable yabai for these windows
yabai -m rule --add app="^Docker Desktop$" manage=off
yabai -m rule --add app="^Karabiner-Elements$" manage=off
yabai -m rule --add app="^Karabiner-EventViewer" manage=off
yabai -m rule --add app="^Microsoft Teams$" manage=off
yabai -m rule --add app="^Slack$" manage=off
yabai -m rule --add app="^Messages$" manage=off
yabai -m rule --add app="^Finder$" manage=off
yabai -m rule --add app="^Disk Utility$" manage=off
yabai -m rule --add app="^Activity Monitor$" manage=off
yabai -m rule --add app="^Calendar$" manage=off
yabai -m rule --add app="^Calculator$" manage=off
yabai -m rule --add app="^Music$" manage=off
yabai -m rule --add app="^Spotify$" manage=off
yabai -m rule --add app='Settings$' manage=off space=1
yabai -m rule --add app="^System Information$" manage=off
yabai -m rule --add app="^System Preferences$" manage=off
yabai -m rule --add app='^Sublime Merge$' manage=off
yabai -m rule --add title='Preferences$' manage=off
yabai -m rule --add title='Settings$' manage=off
yabai -m rule --add title='^Archive Utility$' manage=off
yabai -m rule --add app='^JetBrains Rider$' title='Rename' manage=off
yabai -m rule --add app='^JetBrains Rider$' title='Duplicate' manage=off

# add a signal that floats a window created by these apps when it's the only window
yabai -m signal --add event=window_created app="JetBrains Rider" action='yabai/JetBrainsApps.sh'

function setup_space {
    local idx="$1"
    local name="$2"
    local space=
    echo "setup space $idx : $name"

    space=$(yabai -m query --spaces --space "$idx")
    if [ -z "$space" ]; then
    yabai -m space --create
    fi

    yabai -m space "$idx" --label "$name"
}

setup_space 1 communication
setup_space 2 productivity
setup_space 3 web
setup_space 4 development
setup_space 5 media

yabai -m rule --add app="Music" space=^"media"
yabai -m rule --add app="Spotify" space=^"media"

yabai -m rule --add app="^JetBrains Rider$" space=^"development"
yabai -m rule --add app="^Code$" space=^"development"
yabai -m rule --add app="Warp" space=^"development"
yabai -m rule --add app="Cursor" space=^"development"

yabai -m rule --add app="^Safari*" space=^"web"
yabai -m rule --add app="^Chrome*" space=^"web"

yabai -m rule --add app="^Linear*" space=^"productivity"
yabai -m rule --add app="^Postman*" space=^"productivity"
yabai -m rule --add app="^Karabiner*" space=^"productivity"

yabai -m rule --add app="FaceTime" space=^"communication"
yabai -m rule --add app="Messages" space=^"communication"
yabai -m rule --add app="Slack" space=^"communication"
#yabai -m rule --add app="Microsoft\ Teams" space=^"communication"
yabai -m rule --add app="Discord" space=^"communication"

# focus window after active space changes
#yabai -m signal --add event=space_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq '.[0].id')"

# focus window after active display changes
#yabai -m signal --add event=display_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq '.[0].id')"

# focus window after minimizing other window
yabai -m signal --add event=window_minimized active=yes action="if \$(yabai -m query --windows --window \$YABAI_WINDOW_ID | jq -r '.\"is-floating\"'); then yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse &> /dev/null || yabai -m window --focus \$(yabai -m query --windows --space | jq '.[0].id') &> /dev/null; fi"
#yabai -m signal --add event=window_minimized active=yes action="yabai -m window --focus mouse &> /dev/null || yabai -m window --focus \$(yabai -m query --windows --space | jq '.[0].id') &> /dev/null;"
